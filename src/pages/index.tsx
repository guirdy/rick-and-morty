import { ApiData, Character } from '@/@types/Api'
import axios from 'axios'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import { useForm } from 'react-hook-form'
import { SubmitHandler } from 'react-hook-form/dist/types'
import { toast } from 'react-toastify'
import * as S from '../styles/pages/home'

interface Props {
  res: ApiData
}

interface CurrentInfo {
  count: number
  pages: number
  next: string | null
  prev: string | null
  current: string
}

interface Inputs {
  query: string
}

const API_URL = 'https://rickandmortyapi.com/api/character'

export default function Home(props: Props) {
  const { info, results = [] } = props.res

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>()

  const [filteredBy, setFilteredBy] = useState<string>('')
  const [characters, setCharacters] = useState<Character[]>(results)
  const [currentInfo, setCurrentInfo] = useState<CurrentInfo>({
    ...info,
    current: API_URL,
  })

  const { current } = currentInfo
  const disablePrevButton = currentInfo.prev === null
  const disableNextButton = currentInfo.next === null

  const handleNextPage = () => {
    setCurrentInfo((prevInfo: CurrentInfo) => {
      return { ...prevInfo, current: prevInfo.next ? prevInfo.next : current }
    })
  }

  const handlePrevPage = () => {
    setCurrentInfo((prevInfo: CurrentInfo) => {
      return { ...prevInfo, current: prevInfo.prev ? prevInfo.prev : current }
    })
  }

  const onSubmit: SubmitHandler<Inputs> = (data) => {
    const filteredQuery = `${API_URL}/?name=${data.query}`
    setFilteredBy(data.query)
    setCurrentInfo({ ...currentInfo, current: filteredQuery })
  }

  useEffect(() => {
    if (current === API_URL) return

    async function changePage() {
      const changePage = await axios
        .get<ApiData>(current)
        .then(({ data }) => {
          return data
        })
        .catch(() => {
          toast.error('Personagem n√£o encontrado!')
        })

      if (changePage) {
        setCurrentInfo({
          ...changePage.info,
          current,
        })

        setCharacters([...changePage.results])
      }
    }

    changePage()
  }, [current])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <S.FilterForm onSubmit={handleSubmit(onSubmit)}>
          <div>
            <input
              type="text"
              {...register('query', { required: true })}
              placeholder="Filtrar por nome"
            />
            {errors.query && <span>Preencha o campo acima.</span>}
          </div>
          <button type="submit">B</button>
        </S.FilterForm>

        {!!filteredBy.length && (
          <S.FilteredContainer>
            <span>Filtrando por: {filteredBy}</span>
          </S.FilteredContainer>
        )}

        <S.CharContainer>
          {characters.map((character) => (
            <S.CharContent href={character.url} key={character.id}>
              <Image
                loader={() => character.image}
                src={character.image}
                unoptimized
                width={300}
                height={300}
                alt={character.name}
              />
              <span>{character.name}</span>
            </S.CharContent>
          ))}
        </S.CharContainer>
        <S.PaginationContainer>
          <S.BackButton onClick={handlePrevPage} disabled={disablePrevButton}>
            Anterior
          </S.BackButton>
          <S.NextButton onClick={handleNextPage} disabled={disableNextButton}>
            Proximo
          </S.NextButton>
        </S.PaginationContainer>
      </main>
    </>
  )
}

export async function getStaticProps() {
  const res = await axios.get<ApiData>(API_URL).then(({ data }) => {
    return data
  })

  return {
    props: {
      res,
    },
    revalidate: 60 * 60 * 2, // 2 hours,
  }
}
